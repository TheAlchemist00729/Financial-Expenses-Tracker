const db = require('../db');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const path = require('path');
require('dotenv').config({
  path: path.resolve(__dirname, '../.env'),
});

const SALT_ROUNDS = parseInt(process.env.SALT_ROUNDS, 10) || 10;
const JWT_SECRET = process.env.JWT_SECRET;
const JWT_EXPIRY = process.env.JWT_EXPIRY || '1h';

function generateToken(payload) {
  return jwt.sign(payload, JWT_SECRET, { expiresIn: JWT_EXPIRY });
}

function validateAuthFields(req, res, next) {
  const { username, password } = req.body;
  if (!username?.trim() || !password) {
    return res.status(400).json({ error: 'Username and password are required' });
  }
  req.body.username = username.trim();
  next();
}

exports.validateAuthFields = validateAuthFields;

exports.signup = async (req, res) => {
  const { username, password } = req.body;

  if (password.length < 8) {
    return res.status(400).json({ error: 'Password must be at least 8 characters' });
  }

  try {
    const { rowCount: exists } = await db.query(
      'SELECT 1 FROM users WHERE username = $1',
      [username]
    );
    if (exists) {
      return res.status(409).json({ error: 'Username already taken' });
    }

    const hashed = await bcrypt.hash(password, SALT_ROUNDS);
    const { rows } = await db.query(
      'INSERT INTO users (username, password) VALUES ($1, $2) RETURNING id, username',
      [username, hashed]
    );
    const user = rows[0];

    const token = generateToken({ id: user.id, username: user.username });
    return res.status(201).json({ user, token });
  } catch (err) {
    console.error('[usersController.signup] Error:', err);
    return res.status(500).json({ error: 'Internal server error' });
  }
};

exports.login = async (req, res) => {
  const { username, password } = req.body;

  try {
    const { rows, rowCount } = await db.query(
      'SELECT id, username, password FROM users WHERE username = $1',
      [username]
    );
    if (rowCount === 0) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }

    const user = rows[0];
    const match = await bcrypt.compare(password, user.password);
    if (!match) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }

    const token = generateToken({ id: user.id, username: user.username });
    return res.status(200).json({ user: { id: user.id, username: user.username }, token });
  } catch (err) {
    console.error('[usersController.login] Error:', err);
    return res.status(500).json({ error: 'Internal server error' });
  }
};

