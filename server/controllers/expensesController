const db = require('../db');
const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '../.env') });

const HTTP_BAD_REQUEST = 400;
const HTTP_NOT_FOUND = 404;
const HTTP_SERVER_ERROR = 500;

exports.validateExpense = (req, res, next) => {
  const { amount, description, date, category } = req.body;
  if (
    amount == null ||
    typeof amount !== 'number' ||
    !description?.trim() ||
    !date?.trim() ||
    !category?.trim()
  ) {
    return res
      .status(HTTP_BAD_REQUEST)
      .json({ error: 'All fields (amount, description, date, category) are required and must be valid' });
  }

  if (isNaN(Date.parse(date))) {
    return res.status(HTTP_BAD_REQUEST).json({ error: 'Invalid date format' });
  }

  req.body.description = description.trim();
  req.body.category = category.trim();
  next();
};

exports.createExpense = async (req, res) => {
  const { amount, description, date, category } = req.body;
  try {
    const { rows } = await db.query(
      `INSERT INTO expenses(user_id, amount, description, date, category)
       VALUES($1, $2, $3, $4, $5)
       RETURNING id, user_id, amount, description, date, category`,
      [req.user.id, amount, description, date, category]
    );
    return res.status(201).json({ expense: rows[0] });
  } catch (err) {
    console.error('[createExpense] Error:', err);
    return res.status(HTTP_SERVER_ERROR).json({ error: 'Failed to save expense' });
  }
};

exports.deleteExpense = async (req, res) => {
  const expenseId = parseInt(req.params.id, 10);
  if (isNaN(expenseId)) {
    return res.status(HTTP_BAD_REQUEST).json({ error: 'Invalid expense ID' });
  }

  try {
    const { rowCount } = await db.query(
      `DELETE FROM expenses WHERE id = $1 AND user_id = $2`,
      [expenseId, req.user.id]
    );
    if (rowCount === 0) {
      return res.status(HTTP_NOT_FOUND).json({ error: 'Expense not found' });
    }
    return res.json({ deletedId: expenseId });
  } catch (err) {
    console.error('[deleteExpense] Error:', err);
    return res.status(HTTP_SERVER_ERROR).json({ error: 'Failed to delete expense' });
  }
};

exports.listExpenses = async (req, res) => {
  try {
    const { rows } = await db.query(
      `SELECT id, user_id, amount, description, date, category
       FROM expenses
       WHERE user_id = $1
       ORDER BY date DESC`,
      [req.user.id]
    );
    return res.json({ expenses: rows });
  } catch (err) {
    console.error('[listExpenses] Error:', err);
    return res.status(HTTP_SERVER_ERROR).json({ error: 'Failed to fetch expenses' });
  }
};

exports.summary = async (req, res) => {
  try {
    const { rows } = await db.query(
      `SELECT category, SUM(amount)::numeric(10,2) AS total
       FROM expenses
       WHERE user_id = $1
       GROUP BY category`,
      [req.user.id]
    );
    return res.json({ summary: rows });
  } catch (err) {
    console.error('[summary] Error:', err);
    return res.status(HTTP_SERVER_ERROR).json({ error: 'Failed to summarize expenses' });
  }
};

